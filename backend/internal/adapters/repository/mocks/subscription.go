// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/hanoys/sigma-music/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionRepository is an autogenerated mock type for the ISubscriptionRepository type
type SubscriptionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, sub
func (_m *SubscriptionRepository) Create(ctx context.Context, sub domain.Subscription) (domain.Subscription, error) {
	ret := _m.Called(ctx, sub)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Subscription) (domain.Subscription, error)); ok {
		return rf(ctx, sub)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Subscription) domain.Subscription); ok {
		r0 = rf(ctx, sub)
	} else {
		r0 = ret.Get(0).(domain.Subscription)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Subscription) error); ok {
		r1 = rf(ctx, sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscriptionRepository creates a new instance of SubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionRepository {
	mock := &SubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

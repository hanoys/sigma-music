// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/hanoys/sigma-music/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// StatRepository is an autogenerated mock type for the IStatRepository type
type StatRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, userID, trackID
func (_m *StatRepository) Add(ctx context.Context, userID uuid.UUID, trackID uuid.UUID) error {
	ret := _m.Called(ctx, userID, trackID)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, trackID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetListenedGenres provides a mock function with given fields: ctx, userID
func (_m *StatRepository) GetListenedGenres(ctx context.Context, userID uuid.UUID) ([]domain.UserGenresStat, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetListenedGenres")
	}

	var r0 []domain.UserGenresStat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.UserGenresStat, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.UserGenresStat); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserGenresStat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMostListenedMusicians provides a mock function with given fields: ctx, userID, maxCnt
func (_m *StatRepository) GetMostListenedMusicians(ctx context.Context, userID uuid.UUID, maxCnt int) ([]domain.UserMusiciansStat, error) {
	ret := _m.Called(ctx, userID, maxCnt)

	if len(ret) == 0 {
		panic("no return value specified for GetMostListenedMusicians")
	}

	var r0 []domain.UserMusiciansStat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) ([]domain.UserMusiciansStat, error)); ok {
		return rf(ctx, userID, maxCnt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) []domain.UserMusiciansStat); ok {
		r0 = rf(ctx, userID, maxCnt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserMusiciansStat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = rf(ctx, userID, maxCnt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStatRepository creates a new instance of StatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatRepository {
	mock := &StatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/hanoys/sigma-music/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IAlbumRepository is an autogenerated mock type for the IAlbumRepository type
type IAlbumRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, album
func (_m *IAlbumRepository) Create(ctx context.Context, album domain.Album) (domain.Album, error) {
	ret := _m.Called(ctx, album)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Album) (domain.Album, error)); ok {
		return rf(ctx, album)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Album) domain.Album); ok {
		r0 = rf(ctx, album)
	} else {
		r0 = ret.Get(0).(domain.Album)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Album) error); ok {
		r1 = rf(ctx, album)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IAlbumRepository) GetByID(ctx context.Context, id uuid.UUID) (domain.Album, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.Album, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Album); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Album)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMusicianID provides a mock function with given fields: ctx, musicianID
func (_m *IAlbumRepository) GetByMusicianID(ctx context.Context, musicianID uuid.UUID) ([]domain.Album, error) {
	ret := _m.Called(ctx, musicianID)

	if len(ret) == 0 {
		panic("no return value specified for GetByMusicianID")
	}

	var r0 []domain.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.Album, error)); ok {
		return rf(ctx, musicianID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.Album); ok {
		r0 = rf(ctx, musicianID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, musicianID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: ctx, id
func (_m *IAlbumRepository) Publish(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAlbumRepository creates a new instance of IAlbumRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAlbumRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAlbumRepository {
	mock := &IAlbumRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

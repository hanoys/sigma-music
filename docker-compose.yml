services:
  redis:
    image: redis
    ports:
      - 6379:6379
    networks:
      - backend
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: sigma
      POSTGRES_USER: sigma
      POSTGRES_DB: sigmamusic
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sigma -d sigmamusic"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - .env.local
    networks:
      - backend
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: 'pgadmin4'
    logging:
      driver: none
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: sigma@postgres.com
      PGADMIN_DEFAULT_PASSWORD: password
    volumes:
      - ./.data/pgadmin:/var/lib/pgadmin
    networks:
      - backend

  migrations:
    build:
      context: migrations
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.local
    networks:
      - backend
  minio:
    image: minio/minio
    container_name: 'minio'
    command: minio server /data --console-address :9001
    logging:
      driver: none
    volumes:
      - ./.data/minio:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env.local
    networks:
      - backend
  app-echo:
    build: .
    command: /usr/src/app/bin/echo
    ports:
      - 8081:8080
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    env_file:
      - .env.local
    networks:
      - backend
    volumes:
      - ./log:/usr/src/app/log
      - ./config:/usr/src/app/config
      - ./data:/usr/src/app/data
  app-gin:
    build: .
    command: /usr/src/app/bin/gin
    ports:
      - 8082:8080
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    env_file:
      - .env.local
    networks:
      - backend
    volumes:
      - ./log:/usr/src/app/log
      - ./config:/usr/src/app/config
      - ./data:/usr/src/app/data

  proxy:
    image: nginx
    container_name: 'proxy'
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/static/dist:/static/dist
      - ./docs:/static/docs
      - ./README.md:/static/README.md
      - ./nginx/static/index.html:/static/index.html
      - ./nginx/static/md-renderer.html:/static/md-renderer.html
      - ./log/nginx:/var/log/nginx
    networks:
      - backend
    depends_on:
      - app-echo
      - app-gin

  prometheus:
    image: prom/prometheus:v2.55.0
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
      - "./.data/prometheus:/prometheus"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - backend
  grafana:
    image: grafana/grafana:11.3.0
    ports:
      - "3000:3000"
    volumes:
      - ./.data/grafana:/var/lib/grafana
    networks:
      - backend

networks:
  backend:
    driver: bridge

services:
  redis:
    image: redis
    ports:
      - 6379:6379
    networks:
      - backend
  postgres:
    image: bitnami/postgresql
    container_name: postgres
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d sigmamusic -U sigma" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: none
    restart: always
    shm_size: 128mb
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: repliaction_user
      POSTGRESQL_REPLICATION_PASSWORD: repliaction_password
      POSTGRESQL_USERNAME: sigma
      POSTGRESQL_PASSWORD: sigma
      POSTGRESQL_DATABASE: sigmamusic
      POSTGRESQL_PORT: 5432
      TZ: "Europe/Moscow"
    ports:
      - "5432:5432"
    networks:
      - backend
    env_file:
      - .env.local

  postgres-slave:
    image: bitnami/postgresql
    container_name: postgres-slave
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d sigmamusic -U sigma" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: repliaction_user
      POSTGRESQL_REPLICATION_PASSWORD: repliaction_password
      POSTGRESQL_MASTER_HOST: postgres
      POSTGRESQL_USERNAME: sigma
      POSTGRESQL_PASSWORD: sigma
      POSTGRESQL_DATABASE: sigmamusic
      POSTGRESQL_PORT: 5433
      TZ: "Europe/Moscow"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5433:5432"
    networks:
      - backend
    env_file:
      - .env.local

  pgadmin:
    image: dpage/pgadmin4
    container_name: 'pgadmin4'
    logging:
      driver: none
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: sigma@postgres.com
      PGADMIN_DEFAULT_PASSWORD: password
    volumes:
      - ./.data/pgadmin:/var/lib/pgadmin
    networks:
      - backend

  migrations:
    build:
      context: migrations
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env.local
    networks:
      - backend
  minio:
    image: minio/minio
    container_name: 'minio'
    command: minio server /data --console-address :9001
    logging:
      driver: none
    volumes:
      - ./.data/minio:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env.local
    networks:
      - backend
  app:
    build: .
    ports:
      - 8080:8080
    depends_on:
      postgres-slave:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    env_file:
      - .env.local
    networks:
      - backend
    volumes:
      - ./log:/usr/src/app/log
      - ./config:/usr/src/app/config
      - ./data:/usr/src/app/data

  app-read1:
    container_name: 'app-read1'
    build: .
    volumes:
      - ./log:/usr/src/app/log
      - ./config:/usr/src/app/config
      - ./data:/usr/src/app/data
    env_file:
      - .env.local
    environment:
      DB_HOST: "postgres-slave"
    depends_on:
      postgres-slave:
        condition: service_healthy
      app:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8081:8080"
    networks:
      - backend

  app-read2:
    container_name: 'app-read2'
    build: .
    volumes:
      - ./log:/usr/src/app/log
      - ./config:/usr/src/app/config
      - ./data:/usr/src/app/data
    env_file:
      - .env.local
    environment:
      DB_HOST: "postgres-slave"
    depends_on:
      postgres-slave:
        condition: service_healthy
      app:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8082:8080"
    networks:
      - backend

  app-mirror:
    container_name: 'app-mirror'
    build: .
    volumes:
      - ./log:/usr/src/app/log
      - ./config:/usr/src/app/config
      - ./data:/usr/src/app/data
    env_file:
      - .env.local
    environment:
      DB_HOST: "postgres-slave"
    depends_on:
      postgres-slave:
        condition: service_healthy
      app:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8083:8080"
    networks:
      - backend


  proxy:
    image: nginx
    container_name: 'proxy'
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/static/dist:/static/dist
      - ./docs:/static/docs
      - ./README.md:/static/README.md
      - ./nginx/static/index.html:/static/index.html
      - ./nginx/static/md-renderer.html:/static/md-renderer.html
      - ./log/nginx:/var/log/nginx
    networks:
      - backend
    depends_on:
      - app

networks:
  backend:
    driver: bridge

// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/hanoys/sigma-music/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// HashPasswordProvider is an autogenerated mock type for the IHashPasswordProvider type
type HashPasswordProvider struct {
	mock.Mock
}

// ComparePasswordWithHash provides a mock function with given fields: password, saltedPassword
func (_m *HashPasswordProvider) ComparePasswordWithHash(password string, saltedPassword domain.SaltedPassword) bool {
	ret := _m.Called(password, saltedPassword)

	if len(ret) == 0 {
		panic("no return value specified for ComparePasswordWithHash")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, domain.SaltedPassword) bool); ok {
		r0 = rf(password, saltedPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EncodePassword provides a mock function with given fields: password
func (_m *HashPasswordProvider) EncodePassword(password string) domain.SaltedPassword {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for EncodePassword")
	}

	var r0 domain.SaltedPassword
	if rf, ok := ret.Get(0).(func(string) domain.SaltedPassword); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(domain.SaltedPassword)
	}

	return r0
}

// NewHashPasswordProvider creates a new instance of HashPasswordProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashPasswordProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashPasswordProvider {
	mock := &HashPasswordProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
